#!/usr/bin/env python
#coding:utf-8
#Copyright (C) dirlt

MONIT_TEMPLATE="""#!/bin/bash
#
# umid init.d script. 
#
# All java services require the same directory structure:
#   /var/run/$APP_NAME.pid

APP_NAME="%(app_name)s"
JAR_NAME="%(app_name)s.jar"

# TODO(dirlt):
APP_HOME="%(app_home)s"
JAR_MAIN="%(app_name)s"

HEAP_OPTS="-Xms8192m -Xmx8192m -XX:NewSize=1024m"
GC_OPTS="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC"
LOG4J_OPTS="-Dlog4j.configuration=file:$APP_HOME/log4j.properties "
JMX_OPTS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"
JAVA_OPTS="-server $GC_OPTS $HEAP_OPTS $JMX_OPTS $LOG4J_OPTS -Dfile.encoding=UTF-8"

# TODO(dirlt):
CONFIG="-Dcom.sun.management.jmxremote.port=??? "

pidfile="/var/run/$APP_NAME.pid"

running(){
  # File does not exist, we can run
  [ -f $pidfile ] || return 1
  # Read PID from file
  read PID < $pidfile
  # pid file is empty
  [ ! -z "$PID" ] || return 1
  # File exists but process does not.
  [ -d /proc/${PID} ] || return 1
  return 0
}

find_java() {
  if [ ! -z "$JAVA_HOME" ]; then
    return
  fi
  for dir in /usr /usr/lib/jvm/java-6-sun /opt/jdk /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home /usr/java/default; do
    if [ -x $dir/bin/java ]; then
      JAVA_HOME=$dir
      break
    fi
  done
}

find_java

case "$1" in
  start)
    echo -n "Starting $APP_NAME... "

    if [ ! -r $APP_HOME/$JAR_NAME ]; then
      echo "FAIL"
      echo "*** $APP_NAME jar missing: $APP_HOME/$JAR_NAME - not starting"
      exit 1
    fi
    if [ ! -x $JAVA_HOME/bin/java ]; then
      echo "FAIL"
      echo "*** $JAVA_HOME/bin/java doesn't exist -- check JAVA_HOME?"
      exit 1
    fi
    if running; then
      echo "already running."
      exit 0
    fi

    sh -c "echo $$ > $pidfile;"
    cd $APP_HOME && exec ${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp .:./conf:$APP_HOME/$JAR_NAME ${JAR_MAIN} ${CONFIG}
    tries=0
    while ! running; do
      tries=$((tries + 1))
      if [ $tries -ge 5 ]; then
        echo "FAIL"
        exit 1
      fi
      sleep 1
    done
    echo "done."
  ;;

  stop)
    echo -n "Stopping $APP_NAME... "
    if ! running; then
      echo "wasn't running."
      exit 0
    fi

    tries=0
    while running; do
      tries=$((tries + 1))
      if [ $tries -ge 15 ]; then
        echo "FAILED SOFT SHUTDOWN, TRYING HARDER"
        if [ -f $pidfile ]; then
          kill $(cat $pidfile)
        else
          echo "CAN'T FIND PID, TRY KILL MANUALLY"
          exit 1
        fi
        hardtries=0
        while running; do
          hardtries=$((hardtries + 1))
          if [ $hardtries -ge 5 ]; then
            echo "FAILED HARD SHUTDOWN, TRY KILL -9 MANUALLY"
            kill -9 $(cat $pidfile)
          fi
          sleep 1
        done
      fi
      sleep 1
    done
    echo "done."
  ;;

  status)
    if running; then
      echo "$APP_NAME is running."
    else
      echo "$APP_NAME is NOT running."
    fi
  ;;

  restart)
    $0 stop
    sleep 2
    $0 start
  ;;

  *)
    echo "Usage: /etc/init.d/${APP_NAME}.sh {start|stop|restart|status}"
    exit 1
  ;;
esac

exit 0
"""

import os
def generate(app_name):
    app_home=os.path.abspath(os.getcwd())
    open('%s.sh'%(app_name),'w').write(MONIT_TEMPLATE%(locals()))

import sys
if __name__=='__main__':
    if(len(sys.argv)!=2):
        print 'create a monit script'
        print 'usage:%s app-name'%(sys.argv[0])
    else:
        generate(sys.argv[1])
