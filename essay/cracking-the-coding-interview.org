* cracking-the-coding-interview
#+TITLE: Cracking The Coding Interview

** Foreword
As you get ready for your interviews, consider these suggestions:
   - Write Code on Paper
   - Know Your Resume
   - Don’t Memorize Solutions
   - Talk Out Loud

Receiving an offer is not about solving questions flawlessly (very few candidates do!), but rather, *it is about answering questions better than other candidates.* So don’t stress out when you get a tricky question - everyone else probably thought it was hard too!

** Introduction
** Behind the Scenes
*** The Microsoft Interview
   - Microsoft wants smart people Geeks. People who are passionate about technology.
   - You'll have a short interview with a recruiter where he or she will give you a sample question. Your recruiter is usually there to prep you, and not to grill you on techni- cal questions. Be nice to your recruiter. Your recruiter can be your biggest advocate, even pushing to re-interview you if you stumbled on your first interview. They can fight for you to be hired - or not!
   - During the day, you'll do four or five interviews, often with two different teams Unlike many companies.
   - Depending on the team, interviewers may or may not share their feedback on you with the rest of the interview loop.
   - When you complete your interviews with a team, you might speak with a hiring manager. If so, that’s a great sign! It likely means that you passed the interviews with a particular team. It’s now down to the hiring manager’s decision.
   - You might get a decision that day, or it might be a week. After one week of no word from HR, send them a friendly email asking for a status update.

Definitely Prepare: *“Why do you want to work for Microsoft?”*

In this question, Microsoft wants to see that you’re passionate about technology. A great answer might be, “I’ve been using Microsoft software as long as I can re- member, and I'm really impressed at how Microsoft manages to create a product that is universally excellent. For example, I’ve been using Visual Studio recently to learn game programming, and it’s APIs are excellent.” Note how this shows a passion for technology!

*** The Amazon Interview
   - Amazon’s recruiting process usually begins with one or two phone screens in which you in- terview with a specific team. The engineer who interviews you will usually ask you to write simple code and read it aloud on the phone They will ask a broad set of questions to explore what areas of technology you’re familiar with.
   - Next, you fly to Seattle for four or five interviews with one or two teams which have selected you based on your resume and phone interviews. You will have to code on a whiteboard, and some interviewers will stress other skills. Interviewers are each assigned a specific area to probe and may seem very different from each other.
   - They can not see other feedback until they have submitted their own and they are discouraged from discussing it until the hiring meeting.
   - Amazon’s “bar raiser” interviewer is charged with keeping the interview bar high. If one interview seems significantly harder and different, that’s most like- ly the bar raiser This person has both significant experience with interviews and veto power in the hiring decision.
   - While Amazon’s recruiters are excellent at following up with candidates, occa- sionally there are delays. If you haven’t heard from Amazon within a week, we recommend a friendly email.

Definitely Prepare:
   - Amazon is a web-based company, and that means they care about scale. Make sure you prepare for questions in “Large Scale.” You don’t need a background in distributed systems to answer these questions. See our recommendations in the System Design and Memory Limits Chapter.
   - Additionally, Amazon tends to ask a lot of questions about object oriented design. Check out the Object Oriented Design chapter for sample questions and suggestions.

*** The Google Interview
   - However, because Google HR can be a little disorganized, we recommend being proactive in com- munication.
   - A Google engineer performs the first phone screen, so expect tough technical questions.
   - On your on-site interview, you'll interview with four to six people, one of whom will be a lunch interviewer. Interviewer feedback is kept confidential from the other interviewers, so you can be assured that you enter each interview with blank slate. Your lunch interviewer doesn’t submit feedback, so this is a great opportunity to ask honest questions.
   - Written feedback is submitted to a hiring committee of engineers to make a hire/no-hire recommendation. Feedback is typically broken down into four categories (Analytical Ability, Coding, Experience and Communication) and you are given a score from 1.0 to 4.0 overall.
   - The hiring committee understands that you can’t be expected to excel in every interview, but if multiple people raise the same red flag (arrogance, poor coding skills, etc), that can disqualify you. A hiring committee typically wants to see one interviewer who is an “enthusiastic en- dorser”. In other words, a packet with scores of 3.6, 3.1, 3.1 and 2.6 is better than all 3.1s. Your phone screen is usu- ally not a strong factor in the final deci- sion.
   - The Google hiring process can be slow. If you don’t hear back within one week, politely ask your recruiter for an up- date. A lack of response says nothing about your performance.

Definitely Prepare:
   - As a web-based company, Google cares about how to design a scalable system. So, make sure you prepare for questions from “System Design and Memory Limits” Additionally, many Google interviewers will ask questions involving Bit Ma- nipulation, so please brush up on these questions.

*** The Apple Interview
   - Much like the company itself, Apple’s interview process has minimal beaucracy.
   - The inter- viewers will be looking for excellent technical skills, but a passion for the position and com- pany is also very important. While it’s not a prerequisite to be a Mac user, you should at least be familiar with the system.
   - The interview process typically begins with a recruiter phone screen to get a basic sense of your skills, *followed up by a series of technical phone screens with team members.*
   - Once you’re invited on campus, you'll typically be greeted by the recruiter who provides an overview of the process. You will then have 6-8 interviews with members of the team for which you’re interviewing, as well as key people with whom your team works.
   - You can expect a mix of 1-on-1 and 2-on-1 interviews. Be ready to code on a whiteboard and make sure all of your thoughts are clearly communicated. Lunch is with your potential future manager and appears more casual, but is still an interview. Each interviewer is usually fo- cused on a different area and is discouraged from sharing feedback unless there’s something they want subsequent interviewers to drill into.
   - Towards the end of the day, your inter- viewers will compare notes and if ev- eryone still feels you’re a viable candi- date, you'll interview with the director and then VP of the organization you’re applying to. While this decision is rath- er informal, it’s a very good sign if you make it. This decision also happens be- hind the scenes and if you don’t pass, you'll simply be escorted out of the building without ever having been the wiser (until now)
   - If you made it to the director and VP interviews, all of your interviewers will gather in a conference room to give an official thumbs up or thumbs down The VP typically won’t be present, but can still veto the hire if they weren’t im- pressed.
   - Your recruiter will usually fol- low up a few days later, but feel free to ping your recruiter for updates.

Definitely Prepare:
   - If you know what team you’re interview- ing with, make sure you read up on that product. What do you like about it? What would you improve? Offering specific recommendations can show your passion for the job.
   - Also, Apple employees are huge Apple fans. You should show this same passion in your interview.

*** The Yahoo Interview
   - While Yahoo tends to only recruit at the top 10 – 20 schools, other candidates can still get interviewed through Yahoo’s job board (or – better yet – if they can get an internal referral). If you’re one of the lucky ones selected, your interview process will start off with a phone screen. Your phone screen will be with a senior employee (tech lead, manager, etc)
   - You will typically interview with 6 – 7 people on the same team for 45 minutes each Each interviewer will have an area of focus. Interviews will often be composed as follows:
     - 5 minutes: General conversation Tell me about yourself, your projects, etc 
     - 20 minutes: Coding question For example, implement merge sort
     - 20 minutes: System design For example, design a large distributed cache These ques- tions will often focus on an area from your past experience or on something your interviewer is cur-rently working on
   - At the end of the day, you will likely meet with a Program Manag- er or someone else for a general con- versation (product demos, concerns about the company, your competing offers, etc). Meanwhile, your interview- ers will discuss your performance and attempt to come to a decision The hiring manager has the ultimate say and will weigh the positive feedback against the negative.
   - If you have done well, you will often get a decision that day, but this is not always the case. There can be many reasons that you might not be told for several days – for example, the team may feel it needs to interview several other people.

Definitely Prepare:
   - Yahoo, almost as a rule, asks questions about system design, so make sure you prepare for that. They want to know that you can not only write code, but that you can design software. Don’t worry if you don’t have a background in this - you can still reason your way through it!

** Before the Interview
*** Resume Advice
Resume screeners look for the same things that interviewers do:
   - *Are you smart?*
   - *Can you code?*
That means that you should present your resume to show those two things. Your love of tennis, traveling, or magic cards won’t do much to show that, so it’s likely just wasting space.Keep in mind that recruiters only spend a fixed amount of time (about 20 seconds) looking at your resume. If you limit the content to the best, most impressive, most relevant items, they’ll jump out at the recruiter Weak items only dilute your resume and distract the re- cruiter from what you’d like them to see.

--------------------

*Writing Strong Bullets:*
   - For each role, try to discuss your accomplishments with the following approach: “Accom- plished X by implementing Y which led to Z” Here’s an example:
   - “Reduced object rendering time by 75% by applying Floyd’s algo- rithm, leading to a 10% reduction in system boot time”
   - “Increased average match accu- racy from 1.2 to 1.5 by implement- ing a new comparison algorithm based on windiff”
Not everything you did will fit into this approach, but the principle is the same: show what you did, how you did it, and what the results were Ideally, you should try to make the results “measurable” somehow.

--------------------

*Advice for Non-Native English Speakers and Internationals:*
   - Proofreading: Some companies will throw out your resume just because of a typo. Please get at least one native English speaker to proofread your resume.
   - Personal Information: For US positions, do not include age, marital status, or nationality. This sort of personal information is not appreciated by companies, as it creates a legal liabil- ity for them However, you may want to include your current work authorization / visa status, particularly when applying to smaller companies who may be unable to sponsor candidates.

*** Behavioral Preparation
Behavioral questions are asked for a variety of reasons 
   - They can be asked either to get to know your personality, 
   - to more deeply understand your resume, 
   - or just to ease you into an interview Either way, 
these questions are important and can be prepared for.

Behavioral questions are usually of the form “tell me about a time when you ”, and may ask for an example from a specific project or position. I recommend filling in the following “preparation grid” as shown below:
|                          | Project1 | Project2 | Project3 | Project4 |
|--------------------------+----------+----------+----------+----------|
| Most Challenging         |          |          |          |          |
| What You Learned         |          |          |          |          |
| Most Interesting         |          |          |          |          |
| Hardest Bug              |          |          |          |          |
| Enjoyed Most             |          |          |          |          |
| Conflicts with Teammates |          |          |          |          | 

In each cell, put the corresponding story. We recommend reducing each story to just a couple keywords that you can write in each cell This will make the grid easier to study  

--------------------

*What questions should you ask the interviewer?*
   - Genuine Questions: These are the questions you actually want to know ideas of questions that are valuable to many candidates:
     - “How much of your day do you spend coding?”
     - “How many meetings do you have every week?”
     - “What is the ratio of testers to developers to product managers? What is the interac- tion like? How does project planning happen on the team?”
   - Insightful Questions: These questions are designed to demonstrate your deep knowledge of programming or technologies.
     - “I noticed that you use technology X How do you handle problem Y?”
     - “Why did the product choose to use the X protocol over the Y protocol? I know it has benefits like A, B, C, but many companies choose not to use it because of issue D”
   - Passion Questions: These questions are designed to demonstrate your passion for technol- ogy.
     - “I’m very interested in scalability Did you come in with a background in this, or what opportunities are there to learn about it?”
     - “I’m not familiar with technology X, but it sounds like a very interesting solution Could you tell me a bit more about how it works?”

*** Technical Preparation
   - Memorizing or trying to learn specific questions won’t help you! 
   - Try to solve the problem on your own.
   - Write the code for the algorithm on paper.
   - Type your paper code as-is into a computer.
   - *Do a mock interview. CareerCup offers a mock interview 

   | Data Structures      | Algorithms               | Concepts                 |
   |----------------------+--------------------------+--------------------------|
   | Linked Lists         | Breadth First Search     | Bit Manipulation         |
   | Binary Trees         | Depth First Search       | Singleton Design Pattern |
   | Tries                | Binary Search            | Factory Design Pattern   |
   | Stacks               | Merge Sort               | Memory (Stack vs Heap)   |
   | Queues               | Quick Sort               | Recursion                |
   | Vectors / ArrayLists | Tree Insert / Find / etc | Big-O Time               |
   | Hash Tables          |                          |                          |

** The Interview and Beyond
*** Handling Behavioral Questions
   - Be Specific, Not Arrogant
   - Limit Details
   - Ask Good Questions
   - Structure Answers Using S.A.R(Situation, Action, Response)

*** Handling Technical Questions
A technical interview question can be solved utilizing a five step approach:
   1. Ask your interviewer questions to resolve ambiguity
   2. Design an Algorithm
   3. Write pseudo-code first, but make sure to tell your interviewer that you’re writing pseudo-code! Otherwise, he/she may think that you’re never planning to write “real” code, and many interviewers will hold that against you
   4. Write your code, not too slow and not too fast
   5. Test your code and carefully fix any mistakes

*** Five Algorithm Approaches
*** The Offer and Beyond
   - *Negotiating.* It’s Always Negotiable! Ok, maybe not always, but usually an offer is negotiable even if a recruiter tells you otherwise. It helps if you have a competing offer But, *don’t lie – Microsoft knows what Google offers, so it just won’t be realistic if you make up numbers.* Also, technol- ogy is a small world, and people talk. Be honest.
   - *What’s the money like, really?* Think about the full offer package Many companies will have impressive salaries, but small annual bonuses Other companies will have huge annual bonuses, but lower salaries Make sure you look at the *full package (salary, signing bonus, health care benefits, raises, annual bonus, relocation, stock, promotions, etc)* It’s very confusing, and it’s often not clear which company is offering more
   - *What about your career options?* I can’t give you some magical formula to compute which offer to accept, but here’s what I’d recommend thinking about (in no particular order):
     - Career Path: Make a plan for your career What do you want to do 5, 10 and 15 years out? What skills will you need to develop? Which company or position will help you get there?
     - Promotion Opportunity: Do you prefer to move into management, or would you prefer to become an increasingly senior developer?
     - Money and Benefits: Of course, the money matters (but if you’re early in your career, it probably doesn’t matter much). As mentioned above, make sure you look at the full package.
     - Happiness: Did you like the people? The products? The location? It’s hard to tell, of course, before you work there. What are the options to change teams if you’re unhappy?
     - Brand Name: The company’s brand name can mean a lot for your future career Some company names will open doors, while others will not as much.
     - *What about company stability? Personally, I think it matters much less than most people think. There are so many software companies out there. If you get laid off and need to find a new job, will it be difficult to find a new one? Only you can answer that.*

*** Top Ten Mistakes Candidates Make
   - Practicing on a Computer
   - Not Rehearsing Behavioral Questions
   - Not Doing a Mock Interview
   - Trying to Memorize Solutions
   - Talking Too Much
   - Talking Too Little
   - Rushing
   - Not Debugging
   - Sloppy Coding
   - Giving Up

*** Frequently Asked Questions
*Should I tell my interviewer if I know a question?*

Yes! You should definitely tell your interviewer if you’ve previously heard the question This seems silly to some people - if you already know the question (and answer), you could ace the question, right? Not quite

Here’s why we strongly recommend that you tell your interviewer that you’ve heard the question:
   1. Big honesty points. This shows a lot of integrity That’s huge. Remember that the interviewer is evaluating you as a potential teammate I don’t know about you, but I personally prefer to work with honest people!
   2. The question might have changed ever-so-slightly. You don’t want to risk repeating the wrong answer
   3. If you easily belt out the right answer, it’s obvious to the interviewer. They know how hard a problem is supposed to be. It’s very hard to “pretend” to struggle through a question, because you just can’t approach it the same way other candidates do.
